# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: route_guide.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncIterable, AsyncIterator, Iterable, Optional, Union

import betterproto
import grpclib


@dataclass(eq=False, repr=False)
class Point(betterproto.Message):
    """
    Points are represented as latitude-longitude pairs in the E7 representation
    (degrees multiplied by 10**7 and rounded to the nearest integer). Latitudes
    should be in the range +/- 90 degrees and longitude should be in the range
    +/- 180 degrees (inclusive).
    """

    latitude: int = betterproto.int32_field(1)
    longitude: int = betterproto.int32_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Rectangle(betterproto.Message):
    """
    A latitude-longitude rectangle, represented as two diagonally opposite
    points "lo" and "hi".
    """

    # One corner of the rectangle.
    lo: "Point" = betterproto.message_field(1)
    # The other corner of the rectangle.
    hi: "Point" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Feature(betterproto.Message):
    """
    A feature names something at a given point. If a feature could not be
    named, the name is empty.
    """

    # The name of the feature.
    name: str = betterproto.string_field(1)
    # The point where the feature is detected.
    location: "Point" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RouteNote(betterproto.Message):
    """A RouteNote is a message sent while at a given point."""

    # The location from which the message is sent.
    location: "Point" = betterproto.message_field(1)
    # The message to be sent.
    message: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RouteSummary(betterproto.Message):
    """
    A RouteSummary is received in response to a RecordRoute rpc. It contains
    the number of individual points received, the number of detected features,
    and the total distance covered as the cumulative sum of the distance
    between each point.
    """

    # The number of points received.
    point_count: int = betterproto.int32_field(1)
    # The number of known features passed while traversing the route.
    feature_count: int = betterproto.int32_field(2)
    # The distance covered in metres.
    distance: int = betterproto.int32_field(3)
    # The duration of the traversal in seconds.
    elapsed_time: int = betterproto.int32_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


class RouteGuideStub(betterproto.ServiceStub):
    """Interface exported by the server."""

    async def get_feature(self, *, latitude: int = 0, longitude: int = 0) -> "Feature":
        """
        A simple RPC. Obtains the feature at a given position. A feature with
        an empty name is returned if there's no feature at the given position.
        """

        request = Point()
        request.latitude = latitude
        request.longitude = longitude

        return await self._unary_unary("/routeguide.RouteGuide/GetFeature", request, Feature)

    async def list_features(
        self, *, lo: "Point" = None, hi: "Point" = None
    ) -> AsyncIterator["Feature"]:
        """
        A server-to-client streaming RPC. Obtains the Features available within
        the given Rectangle.  Results are streamed rather than returned at once
        (e.g. in a response message with a repeated field), as the rectangle
        may cover a large area and contain a huge number of features.
        """

        request = Rectangle()
        if lo is not None:
            request.lo = lo
        if hi is not None:
            request.hi = hi

        async for response in self._unary_stream(
            "/routeguide.RouteGuide/ListFeatures",
            request,
            Feature,
        ):
            yield response

    async def record_route(
        self, request_iterator: Union[AsyncIterable["Point"], Iterable["Point"]]
    ) -> "RouteSummary":
        """
        A client-to-server streaming RPC. Accepts a stream of Points on a route
        being traversed, returning a RouteSummary when traversal is completed.
        """

        return await self._stream_unary(
            "/routeguide.RouteGuide/RecordRoute", request_iterator, Point, RouteSummary
        )

    async def route_chat(
        self, request_iterator: Union[AsyncIterable["RouteNote"], Iterable["RouteNote"]]
    ) -> AsyncIterator["RouteNote"]:
        """
        A Bidirectional streaming RPC. Accepts a stream of RouteNotes sent
        while a route is being traversed, while receiving other RouteNotes
        (e.g. from other users).
        """

        async for response in self._stream_stream(
            "/routeguide.RouteGuide/RouteChat",
            request_iterator,
            RouteNote,
            RouteNote,
        ):
            yield response
